// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/p2p/ProposeBlock.proto

package proposalpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProposalService_SendProposal_FullMethodName      = "/proposal.ProposalService/SendProposal"
	ProposalService_CommitBlock_FullMethodName       = "/proposal.ProposalService/CommitBlock"
	ProposalService_SyncMissingBlocks_FullMethodName = "/proposal.ProposalService/SyncMissingBlocks"
)

// ProposalServiceClient is the client API for ProposalService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service để gửi Proposal
type ProposalServiceClient interface {
	SendProposal(ctx context.Context, in *ProposalRequest, opts ...grpc.CallOption) (*ProposalResponse, error)
	CommitBlock(ctx context.Context, in *CommitBlockRequest, opts ...grpc.CallOption) (*CommitBlockResponse, error)
	// Đồng bộ block khi follower bị rớt mạng hoặc restart
	SyncMissingBlocks(ctx context.Context, in *SyncBlocksRequest, opts ...grpc.CallOption) (*SyncBlocksResponse, error)
}

type proposalServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProposalServiceClient(cc grpc.ClientConnInterface) ProposalServiceClient {
	return &proposalServiceClient{cc}
}

func (c *proposalServiceClient) SendProposal(ctx context.Context, in *ProposalRequest, opts ...grpc.CallOption) (*ProposalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProposalResponse)
	err := c.cc.Invoke(ctx, ProposalService_SendProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposalServiceClient) CommitBlock(ctx context.Context, in *CommitBlockRequest, opts ...grpc.CallOption) (*CommitBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitBlockResponse)
	err := c.cc.Invoke(ctx, ProposalService_CommitBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proposalServiceClient) SyncMissingBlocks(ctx context.Context, in *SyncBlocksRequest, opts ...grpc.CallOption) (*SyncBlocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncBlocksResponse)
	err := c.cc.Invoke(ctx, ProposalService_SyncMissingBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProposalServiceServer is the server API for ProposalService service.
// All implementations must embed UnimplementedProposalServiceServer
// for forward compatibility.
//
// Service để gửi Proposal
type ProposalServiceServer interface {
	SendProposal(context.Context, *ProposalRequest) (*ProposalResponse, error)
	CommitBlock(context.Context, *CommitBlockRequest) (*CommitBlockResponse, error)
	// Đồng bộ block khi follower bị rớt mạng hoặc restart
	SyncMissingBlocks(context.Context, *SyncBlocksRequest) (*SyncBlocksResponse, error)
	mustEmbedUnimplementedProposalServiceServer()
}

// UnimplementedProposalServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProposalServiceServer struct{}

func (UnimplementedProposalServiceServer) SendProposal(context.Context, *ProposalRequest) (*ProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProposal not implemented")
}
func (UnimplementedProposalServiceServer) CommitBlock(context.Context, *CommitBlockRequest) (*CommitBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitBlock not implemented")
}
func (UnimplementedProposalServiceServer) SyncMissingBlocks(context.Context, *SyncBlocksRequest) (*SyncBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncMissingBlocks not implemented")
}
func (UnimplementedProposalServiceServer) mustEmbedUnimplementedProposalServiceServer() {}
func (UnimplementedProposalServiceServer) testEmbeddedByValue()                         {}

// UnsafeProposalServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProposalServiceServer will
// result in compilation errors.
type UnsafeProposalServiceServer interface {
	mustEmbedUnimplementedProposalServiceServer()
}

func RegisterProposalServiceServer(s grpc.ServiceRegistrar, srv ProposalServiceServer) {
	// If the following call pancis, it indicates UnimplementedProposalServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProposalService_ServiceDesc, srv)
}

func _ProposalService_SendProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServiceServer).SendProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProposalService_SendProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServiceServer).SendProposal(ctx, req.(*ProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProposalService_CommitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServiceServer).CommitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProposalService_CommitBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServiceServer).CommitBlock(ctx, req.(*CommitBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProposalService_SyncMissingBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProposalServiceServer).SyncMissingBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProposalService_SyncMissingBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProposalServiceServer).SyncMissingBlocks(ctx, req.(*SyncBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProposalService_ServiceDesc is the grpc.ServiceDesc for ProposalService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProposalService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proposal.ProposalService",
	HandlerType: (*ProposalServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendProposal",
			Handler:    _ProposalService_SendProposal_Handler,
		},
		{
			MethodName: "CommitBlock",
			Handler:    _ProposalService_CommitBlock_Handler,
		},
		{
			MethodName: "SyncMissingBlocks",
			Handler:    _ProposalService_SyncMissingBlocks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/p2p/ProposeBlock.proto",
}
